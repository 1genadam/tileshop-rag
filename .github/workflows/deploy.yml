name: Deploy to Fly.io

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tileshop_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Set up environment variables
      run: |
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "POSTGRES_USER=postgres" >> .env
        echo "POSTGRES_PASSWORD=postgres" >> .env
        echo "POSTGRES_DB=tileshop_test" >> .env
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=. --cov-report=term-missing
    
    - name: Test scraper functionality
      run: |
        python -c "from curl_scraper import test_scraper_health; test_scraper_health()"
    
    - name: Test dashboard startup
      run: |
        timeout 30 python dashboard_app.py &
        sleep 10
        curl -f http://localhost:8080/health || exit 1

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Fly CLI
      uses: superfly/flyctl-actions/setup-flyctl@master
    
    - name: Deploy to Fly.io
      run: |
        flyctl deploy --remote-only
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    
    - name: Health check deployment
      run: |
        sleep 30
        curl -f https://tileshop-rag.fly.dev/health || exit 1
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment successful to https://tileshop-rag.fly.dev"
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Deployment failed. Check logs for details."
        exit 1